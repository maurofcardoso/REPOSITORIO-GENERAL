// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entities.Area", b =>
                {
                    b.Property<int>("idArea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idArea"), 1L, 1);

                    b.Property<bool>("activeArea")
                        .HasColumnType("bit")
                        .HasColumnName("activeArea");

                    b.Property<int>("createUser")
                        .HasColumnType("int")
                        .HasColumnName("createUser");

                    b.Property<DateTime>("dateCreate")
                        .HasColumnType("datetime2")
                        .HasColumnName("dateCreate");

                    b.Property<DateTime>("dateUpdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("dateUpdate");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("nameArea")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nameArea");

                    b.Property<int>("updateUser")
                        .HasColumnType("int")
                        .HasColumnName("updateUser");

                    b.HasKey("idArea");

                    b.ToTable("Area", (string)null);

                    b.HasData(
                        new
                        {
                            idArea = 1,
                            activeArea = true,
                            createUser = 1,
                            dateCreate = new DateTime(2022, 11, 17, 1, 2, 36, 258, DateTimeKind.Local).AddTicks(5879),
                            dateUpdate = new DateTime(2022, 11, 17, 1, 2, 36, 258, DateTimeKind.Local).AddTicks(5897),
                            description = "Area encargada de la administracion total del sistema",
                            nameArea = "Admin",
                            updateUser = 1
                        },
                        new
                        {
                            idArea = 2,
                            activeArea = true,
                            createUser = 1,
                            dateCreate = new DateTime(2022, 11, 17, 1, 2, 36, 258, DateTimeKind.Local).AddTicks(5899),
                            dateUpdate = new DateTime(2022, 11, 17, 1, 2, 36, 258, DateTimeKind.Local).AddTicks(5900),
                            description = "Area encargada de registrar y ejecutar las compras/ventas de la organización",
                            nameArea = "CompraVenta",
                            updateUser = 1
                        },
                        new
                        {
                            idArea = 3,
                            activeArea = true,
                            createUser = 1,
                            dateCreate = new DateTime(2022, 11, 17, 1, 2, 36, 258, DateTimeKind.Local).AddTicks(5902),
                            dateUpdate = new DateTime(2022, 11, 17, 1, 2, 36, 258, DateTimeKind.Local).AddTicks(5903),
                            description = "Area encargada del soporte tecnico de la organización",
                            nameArea = "Soporte",
                            updateUser = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Ticket", b =>
                {
                    b.Property<int>("idTicket")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idTicket"), 1L, 1);

                    b.Property<int>("idPriority")
                        .HasColumnType("int")
                        .HasColumnName("idPriority");

                    b.Property<int>("idStatus")
                        .HasColumnType("int")
                        .HasColumnName("idStatus");

                    b.Property<int>("idTicketBody")
                        .HasColumnType("int")
                        .HasColumnName("idTicketBody");

                    b.Property<int>("idTicketCategory")
                        .HasColumnType("int")
                        .HasColumnName("idTicketCategory");

                    b.Property<int>("idTicketCount")
                        .HasColumnType("int")
                        .HasColumnName("idPTicketCount");

                    b.Property<int>("idUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.HasKey("idTicket");

                    b.HasIndex("idPriority");

                    b.HasIndex("idStatus");

                    b.HasIndex("idTicketBody")
                        .IsUnique();

                    b.HasIndex("idTicketCategory");

                    b.HasIndex("idTicketCount")
                        .IsUnique();

                    b.ToTable("Ticket", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TicketBody", b =>
                {
                    b.Property<int>("idTicketBody")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idTicketBody"), 1L, 1);

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("file")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.HasKey("idTicketBody");

                    b.ToTable("TicketBody", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TicketCategory", b =>
                {
                    b.Property<int>("idTicketCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idTicketCategory"), 1L, 1);

                    b.Property<bool>("active")
                        .HasColumnType("bit")
                        .HasColumnName("active");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int>("idAreadestino")
                        .HasColumnType("int")
                        .HasColumnName("idAreadestino");

                    b.Property<int>("minApprovers")
                        .HasColumnType("int")
                        .HasColumnName("minApprovers");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<bool>("reqApproval")
                        .HasColumnType("bit")
                        .HasColumnName("reqApproval");

                    b.HasKey("idTicketCategory");

                    b.HasIndex("idAreadestino");

                    b.ToTable("TicketCategory", (string)null);

                    b.HasData(
                        new
                        {
                            idTicketCategory = 1,
                            active = true,
                            description = "Categoria responsable de gestionar los tickets de ventas",
                            idAreadestino = 2,
                            minApprovers = 1,
                            name = "Ventas",
                            reqApproval = true
                        },
                        new
                        {
                            idTicketCategory = 2,
                            active = true,
                            description = "Categoria responsable de gestionar los tickets de compras",
                            idAreadestino = 2,
                            minApprovers = 1,
                            name = "Compras",
                            reqApproval = true
                        },
                        new
                        {
                            idTicketCategory = 3,
                            active = true,
                            description = "Categoria responsable de gestionar las reparaciones de Hardware",
                            idAreadestino = 3,
                            minApprovers = 1,
                            name = "Reparacion Hardware",
                            reqApproval = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.TicketComment", b =>
                {
                    b.Property<int>("idComment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idComment"), 1L, 1);

                    b.Property<string>("comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("dateComment")
                        .HasColumnType("datetime2")
                        .HasColumnName("dateComment");

                    b.Property<bool>("edited")
                        .HasColumnType("bit");

                    b.Property<string>("file")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file");

                    b.Property<int>("idTicket")
                        .HasColumnType("int");

                    b.Property<int>("idUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.HasKey("idComment");

                    b.HasIndex("idTicket");

                    b.ToTable("TicketComment", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TicketCount", b =>
                {
                    b.Property<int>("idTicketCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idTicketCount"), 1L, 1);

                    b.Property<int>("countApproved")
                        .HasColumnType("int")
                        .HasColumnName("countApproved");

                    b.Property<int>("countDisapproved")
                        .HasColumnType("int")
                        .HasColumnName("countDisapproved");

                    b.Property<int>("countOpen")
                        .HasColumnType("int")
                        .HasColumnName("countOpen");

                    b.HasKey("idTicketCount");

                    b.ToTable("TicketCount", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TicketLog", b =>
                {
                    b.Property<int>("idTicketLog")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idTicketLog"), 1L, 1);

                    b.Property<string>("action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("action");

                    b.Property<DateTime>("dateAction")
                        .HasColumnType("datetime2")
                        .HasColumnName("dateAction");

                    b.Property<int>("idTicket")
                        .HasColumnType("int")
                        .HasColumnName("idTicket");

                    b.Property<int>("idUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.HasKey("idTicketLog");

                    b.HasIndex("idTicket");

                    b.ToTable("TicketLog", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TicketPriority", b =>
                {
                    b.Property<int>("idPriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idPriority"), 1L, 1);

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.HasKey("idPriority");

                    b.ToTable("TicketPriority", (string)null);

                    b.HasData(
                        new
                        {
                            idPriority = 1,
                            description = "Baja"
                        },
                        new
                        {
                            idPriority = 2,
                            description = "Media"
                        },
                        new
                        {
                            idPriority = 3,
                            description = "Alta"
                        });
                });

            modelBuilder.Entity("Domain.Entities.TicketStatus", b =>
                {
                    b.Property<int>("idTicketStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idTicketStatus"), 1L, 1);

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.HasKey("idTicketStatus");

                    b.ToTable("TicketStatus", (string)null);

                    b.HasData(
                        new
                        {
                            idTicketStatus = 1,
                            description = "Pendiente"
                        },
                        new
                        {
                            idTicketStatus = 2,
                            description = "En curso"
                        },
                        new
                        {
                            idTicketStatus = 3,
                            description = "Finalizado"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Ticket", b =>
                {
                    b.HasOne("Domain.Entities.TicketPriority", "ticketPriority")
                        .WithMany("tickets")
                        .HasForeignKey("idPriority")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TicketStatus", "ticketStatus")
                        .WithMany("tickets")
                        .HasForeignKey("idStatus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TicketBody", "ticketBody")
                        .WithOne("ticket")
                        .HasForeignKey("Domain.Entities.Ticket", "idTicketBody")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TicketCategory", "ticketCategory")
                        .WithMany("tickets")
                        .HasForeignKey("idTicketCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TicketCount", "ticketCount")
                        .WithOne("ticket")
                        .HasForeignKey("Domain.Entities.Ticket", "idTicketCount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ticketBody");

                    b.Navigation("ticketCategory");

                    b.Navigation("ticketCount");

                    b.Navigation("ticketPriority");

                    b.Navigation("ticketStatus");
                });

            modelBuilder.Entity("Domain.Entities.TicketCategory", b =>
                {
                    b.HasOne("Domain.Entities.Area", "area")
                        .WithMany("ticketCategories")
                        .HasForeignKey("idAreadestino")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("area");
                });

            modelBuilder.Entity("Domain.Entities.TicketComment", b =>
                {
                    b.HasOne("Domain.Entities.Ticket", "ticket")
                        .WithMany("ticketComments")
                        .HasForeignKey("idTicket")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ticket");
                });

            modelBuilder.Entity("Domain.Entities.TicketLog", b =>
                {
                    b.HasOne("Domain.Entities.Ticket", "ticket")
                        .WithMany("ticketLogs")
                        .HasForeignKey("idTicket")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ticket");
                });

            modelBuilder.Entity("Domain.Entities.Area", b =>
                {
                    b.Navigation("ticketCategories");
                });

            modelBuilder.Entity("Domain.Entities.Ticket", b =>
                {
                    b.Navigation("ticketComments");

                    b.Navigation("ticketLogs");
                });

            modelBuilder.Entity("Domain.Entities.TicketBody", b =>
                {
                    b.Navigation("ticket")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.TicketCategory", b =>
                {
                    b.Navigation("tickets");
                });

            modelBuilder.Entity("Domain.Entities.TicketCount", b =>
                {
                    b.Navigation("ticket")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.TicketPriority", b =>
                {
                    b.Navigation("tickets");
                });

            modelBuilder.Entity("Domain.Entities.TicketStatus", b =>
                {
                    b.Navigation("tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
